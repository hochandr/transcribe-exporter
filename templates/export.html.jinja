<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Transcribe! Export</title>
    <script src="https://unpkg.com/wavesurfer.js@7"></script>
    <script src="https://unpkg.com/wavesurfer.js@7/dist/plugins/timeline.min.js"></script>
    <script src="https://unpkg.com/wavesurfer.js@7/dist/plugins/regions.min.js"></script>
    <script src="https://unpkg.com/wavesurfer.js@7/dist/plugins/hover.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
</head>

<style>
    .waveform ::part(region) {
        font-size: 16px;
        text-shadow: 0 0 20px #ffffff;
        border-radius: 0;
    }

    .zoom {
        display: none;
    }

    .textblock span {
        display: inline-table;
        border-radius: 2px;
    }

    .textblock i + span {
        background-color: #f5f5f5;
    }
</style>

<body>
<div class="container-xxl">
    <br>
    <h1 class="display-4 mb-4">{{ xsc.sound_file.name }}</h1>

    <div id="{{ id }}-zoom" class="zoom float-end mb-2">
        <input type="range" class="form-range" min="0" max="100" value="0">
    </div>

    <div id="{{ id }}-loading" class="text-center">
        <div class="spinner-grow" role="status">
        </div>
    </div>

    <div id="{{ id }}-waveform" class="waveform mb-5 mt-3"></div>

    <p class="text-center">
        <button class="btn btn-outline-dark" type="button" data-bs-toggle="collapse"
                data-bs-target="#collapseTextBlocks"
                aria-expanded="false" aria-controls="collapseTextBlocks">
            Text Blocks
        </button>
    </p>
    <div class="collapse" id="collapseTextBlocks">
        <div class="card card-body">
            <ul id="{{ id }}-textblocks" class="textblocks list-unstyled mb-0">
                {% for text_block in xsc.text_blocks %}
                    <li class="textblock font-monospace">
                        <button class="btn btn-link timestamp"
                                value="{{ text_block.timestamp|totalSeconds }}">
                            {{ text_block.timestamp|formatTimestamp }}
                        </button>
                        {% if text_block.color == 'White' %}
                            <i class="bi bi-justify-left"></i>
                        {% endif %}
                        <span>{{ text_block.value|formatTextBlock }}</span>
                    </li>
                {% endfor %}
            </ul>
        </div>
    </div>
</div>

<script type="module">
    const regions = WaveSurfer.Regions.create()
    const hover = WaveSurfer.Hover.create({
        lineColor: 'rgba(0,0,0,0.5)',
        labelBackground: 'rgba(0,0,0,0.5)',
        labelColor: '#fff',
        labelSize: '11px',
    });

    const ws = WaveSurfer.create({
        container: '#{{ id }}-waveform',
        waveColor: '#d7d7d7',
        progressColor: '#c8c8c8',
        cursorColor: '#ff0015',
        cursorWidth: 2,
        normalize: true,
        dragToSeek: true,
        plugins: [WaveSurfer.Timeline.create(), regions, hover],
    })

    const base64Response = await fetch('data:audio/mpeg;base64,{{ base64 }}');
    const blob = await base64Response.blob();
    ws.loadBlob(blob);

    ws.once('decode', () => {
        {% for region in regions %}
            regions.addRegion({
                start: {{ region.start }},
                end: {{ region.end }},
                content: '{{ region.content }}',
                color: '{{ region.color }}',
                drag: false,
                resize: false,
            })
        {% endfor %}

        document.querySelector('#{{ id }}-zoom input').addEventListener('input',
            (e) => {
                const minPxPerSec = e.target.valueAsNumber
                ws.zoom(minPxPerSec)
            })

        document.querySelectorAll('#{{ id }}-textblocks button.timestamp').forEach((button) => {
            button.onclick = (e) => {
                ws.setTime(e.target.value)
                ws.play()
            }
        })
    })

    ws.on('redrawcomplete', () => {
        document.querySelector('#{{ id }}-loading').style.display = 'none';
        document.querySelector('#{{ id }}-zoom').style.display = 'block';
    })

    ws.on('interaction', () => {
        ws.playPause()
    })

    ws.on('finish', () => {
        ws.setTime(0)
    })
</script>
</body>
</html>